
AWSTemplateFormatVersion: 2010-09-09
Description: Ec2 block device mapping
Resources:
   LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                 Service:
                 - lambda.amazonaws.com
              Action:
              - sts:AssumeRole
         Path: "/"
         Policies:
         - PolicyName: root
           PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - "logs:*"
                Resource: arn:aws:logs:::*
   VPC:
      Type: AWS::EC2::VPC
      Properties:
         CidrBlock: 172.31.0.0/16
         EnableDnsSupport: true
         EnableDnsHostnames: true
         InstanceTenancy: default
   InternetGateway:
      Type: AWS::EC2::InternetGateway
   VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
         VpcId: !Ref VPC
         InternetGatewayId: !Ref InternetGateway
   subnet1:
      Type: AWS::EC2::Subnet
      Properties:
         CidrBlock: 172.31.0.0/20
         VpcId: !Ref VPC
         AvailabilityZone: "us-east-1a"
         MapPublicIpOnLaunch: true
   subnet2:
      Type: AWS::EC2::Subnet
      Properties:
         CidrBlock: 172.31.16.0/20
         VpcId: !Ref VPC
         AvailabilityZone: "us-east-1b"
   RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
         VpcId: !Ref VPC
   InternetRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
         DestinationCidrBlock: 0.0.0.0/0
         GatewayId: !Ref InternetGateway
         RouteTableId: !Ref RouteTable
   Subnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId: !Ref RouteTable
         SubnetId: !Ref subnet1
   SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupName: "Internet Group"
         GroupDescription: "SSH traffic in, all traffic out."
         VpcId: !Ref VPC
         SecurityGroupIngress:
           - IpProtocol: tcp
             FromPort: '22'
             ToPort: '22'
             CidrIp: 0.0.0.0/0
         SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0 
   lb:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
         LoadBalancerName: lb
         Subnets: 
            - !Ref subnet1
         SecurityGroups: 
            - !Ref lbgrp
         Listeners:
         -  LoadBalancerPort: 80
            InstancePort: 80
            Protocol: http
   webserver1:
      Type: AWS::EC2::Instance
      Properties:
         ImageId: ami-041114ddee4a98333
         AvailabilityZone: us-east-1a
         KeyName: windows
         InstanceType: t2.micro
         SubnetId: !Ref subnet1
         SecurityGroupIds: 
            - !Ref web1grp
         UserData:
            !Base64 |
                <powershell> 
                Start-Transcript; 

                # Install IIS
                Import-Module ServerManager; 
                Enable-WindowsOptionalFeature -Online -NoRestart -FeatureName 'IIS-WebServerRole', 'IIS-WebServer', 'IIS-ManagementConsole';

                # Configure Bindings to :443
                New-WebBinding -Name "Default Web Site" -IP "*" -Port 443 -Protocol https -SslFlags 0;
                $newCert = New-SelfSignedCertificate -DnsName localhost -CertStoreLocation cert:\LocalMachine\My; 
                $SslBinding = Get-WebBinding -Name "Default Web Site" -Protocol "https";
                $SslBinding.AddSslCertificate($newCert.GetCertHashString(), "my"); 
                Get-WebBinding -Port 80 -Name "Default Web Site" | Remove-WebBinding;

                # Install CodeDeploy Agent 
                Import-Module AWSPowerShell; 
                New-Item -Path "C:\Temp" -ItemType "directory" -Force; 
                Read-S3Object -BucketName aws-codedeploy-us-east-1 -Key latest/codedeploy-agent.msi -File c:\temp\codedeploy-agent.msi; 
                c:\temp\codedeploy-agent.msi /quiet /l c:\temp\host-agent-install-log.txt;
                </powershell>
   LambdaFunctionForStopwebserver1:
      Type: AWS::Lambda::Function
      Properties:
         Code:
            ZipFile: !Sub |
               import boto3
               def lambda_handler(event,context):
               ec2 = boto3.client('ec2', region_name=Region)
               ec2.stop_instances(InstanceIds=INSTANCEID)
         Description: Lambda function.
         FunctionName: LambdaFunctionForStopwebserver1
         Handler: index.lambda_handler
         Role : !GetAtt LambdaExecutionRole.Arn
         Runtime: python2.7
         Timeout: 10
         Environment:
            Variables:
               INSTANCEID: !Ref webserver1
               Region:
                  Fn::GetAtt:
                     - webserver1
                     - AvailabilityZone
   LambdaFunctionForStartwebserver1:
      Type: AWS::Lambda::Function
      Properties:
         Code:
            ZipFile: !Sub |
               import boto3
               def lambda_handler(event,context):
               ec2 = boto3.client('ec2', region_name=Region)
               ec2.start_instances(InstanceIds=INSTANCEID)
         Description: Lambda function.
         FunctionName: LambdaFunctionForStartwebserver1
         Handler: index.lambda_handler
         Role : !GetAtt LambdaExecutionRole.Arn
         Runtime: python2.7
         Timeout: 10
         Environment:
            Variables:
               INSTANCEID: !Ref webserver1
               Region:
                  Fn::GetAtt:
                     - webserver1
                     - AvailabilityZone
   ScheduledRuleForStartwebserver1:
      Type: AWS::Events::Rule
      Properties:
         Description: "ScheduledRule"
         ScheduleExpression: cron(0 6 * * ? *)
         State: "ENABLED"
         Targets: 
         -
            Arn:
               Fn::GetAtt:
                  - LambdaFunctionForStartwebserver1
                  - Arn
            Id: TargetFunctionV2webserver1
   ScheduledRuleForStopwebserver1:
      Type: AWS::Events::Rule
      Properties:
         Description: "ScheduledRule"
         ScheduleExpression: cron(0 18 * * ? *)
         State: "ENABLED"
         Targets: 
         -
            Arn:
               Fn::GetAtt:
                  - LambdaFunctionForStopwebserver1
                  - Arn
            Id: TargetFunctionV1webserver1
   PermissionForEventsToInvokeLambdaStartwebserver1:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: LambdaFunctionForStartwebserver1
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
            Fn::GetAtt:
              - ScheduledRuleForStartwebserver1
              - Arn
   PermissionForEventsToInvokeLambdaStopwebserver1:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: LambdaFunctionForStopwebserver1
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
            Fn::GetAtt:
              - ScheduledRuleForStopwebserver1
              - Arn
   webserver2:
      Type: AWS::EC2::Instance
      Properties:
         ImageId: ami-009d6802948d06e52
         AvailabilityZone: us-east-1a
         KeyName: windows
         InstanceType: t2.micro
         SubnetId: !Ref subnet1
         SecurityGroupIds: 
            - !Ref wbgrp2
         UserData:
            Fn::Base64: !Sub |
                #!/bin/bash
                yum update -y
                amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
                yum install -y httpd mariadb-server
                systemctl start httpd
                systemctl enable httpd
                usermod -a -G apache ec2-user
                chown -R ec2-user:apache /var/www
                chmod 2775 /var/www
                find /var/www -type d -exec chmod 2775 {} \;
                find /var/www -type f -exec chmod 0664 {} \;
                echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
   dbserver:
      Type: AWS::RDS::DBInstance
      Properties:
         DBName: dbserver
         VPCSecurityGroups:
            - !Ref dbgrp
         DBSubnetGroupName: !Ref myDBSubnetGroup
         AllocatedStorage: 10
         DBInstanceClass: db.t2.micro
         Engine: MySQL
         MasterUsername: root
         MasterUserPassword: eniyan007
   myDBSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupDescription: "description"
        SubnetIds:
          - !Ref subnet2
          - !Ref subnet1
   lbgrp:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupName: lbgrp
         GroupDescription: sample
         VpcId: !Ref VPC
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 80
               IpProtocol: tcp
               ToPort: 80
            -
               CidrIp: 0.0.0.0/0
               FromPort: 443
               IpProtocol: tcp
               ToPort: 443
   web1grp:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupName: web1grp
         GroupDescription: sample
         VpcId: !Ref VPC
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 80
               IpProtocol: tcp
               ToPort: 80
            -
               CidrIp: 0.0.0.0/0
               FromPort: 443
               IpProtocol: tcp
               ToPort: 443
            -
               CidrIp: 0.0.0.0/0
               FromPort: 22
               IpProtocol: tcp
               ToPort: 22
            -
               CidrIp: 0.0.0.0/0
               FromPort: 3389
               IpProtocol: tcp
               ToPort: 3389
   wbgrp2:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupName: wbgrp2
         GroupDescription: sample
         VpcId: !Ref VPC
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 80
               IpProtocol: tcp
               ToPort: 80
            -
               CidrIp: 0.0.0.0/0
               FromPort: 443
               IpProtocol: tcp
               ToPort: 443
            -
               CidrIp: 0.0.0.0/0
               FromPort: 22
               IpProtocol: tcp
               ToPort: 22
            -
               CidrIp: 0.0.0.0/0
               FromPort: 3389
               IpProtocol: tcp
               ToPort: 3389
   dbgrp:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupName: dbgrp
         GroupDescription: sample
         VpcId: !Ref VPC
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 22
               IpProtocol: tcp
               ToPort: 22
            -
               CidrIp: 0.0.0.0/0
               FromPort: 3389
               IpProtocol: tcp
               ToPort: 3389
            -
               CidrIp: 0.0.0.0/0
               FromPort: 3306
               IpProtocol: tcp
               ToPort: 3306
            -
               CidrIp: 0.0.0.0/0
               FromPort: 1403
               IpProtocol: tcp
               ToPort: 1403
   SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
         DisplayName: SampleSNS
         TopicName: SampleSNS
         Subscription:
            - Endpoint: r.eniyanilavan@gmail.com
              Protocol: email
   alarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
         AlarmDescription: CPU alarm for my instance
         AlarmActions:
            - Ref: SNSTopic
         MetricName: CPUUtilization
         Namespace: AWS/EC2
         Statistic: Average
         Period: 60
         DatapointsToAlarm: 2
         EvaluationPeriods: 500
         Threshold: 80
         ComparisonOperator: GreaterThanThreshold
         Dimensions:
            - Name: !Ref webserver1
              Value:
                 Ref: webserver1
   SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
         DisplayName: SampleSNS
         TopicName: SampleSNS
         Subscription:
            - Endpoint: r.eniyanilavan@gmail.com
              Protocol: email
   alarm2:
      Type: AWS::CloudWatch::Alarm
      Properties:
         AlarmDescription: CPU alarm for my instance
         AlarmActions:
            - Ref: SNSTopic
         MetricName: CPUUtilization
         Namespace: AWS/EC2
         Statistic: Average
         Period: 60
         DatapointsToAlarm: 2
         EvaluationPeriods: 500
         Threshold: 80
         ComparisonOperator: GreaterThanThreshold
         Dimensions:
            - Name: !Ref webserver2
              Value:
                 Ref: webserver2